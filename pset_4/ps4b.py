# Problem Set 4B
# Name:
# Collaborators:

import random


class Message( object ):

    def __init__(self, input_text):
        '''
        Initializes a Message object

        input_text (string): the message's text

        a Message object has one attribute:
            the message text
        '''
        self.message = input_text

    def __repr__(self):
        '''
        Returns a human readable representation of the object
        DO NOT CHANGE

        Returns: (string) A representation of the object
        '''
        return f'''Message('{self.get_text()}')'''

    def get_text(self):
        '''
        Used to access the message text outside of the class

        Returns: (string) the message text
        '''
        return self.message

    def shift_char(self, char, shift):
        '''
        Used to shift a character as described in the pset handout

        char (string): the single character to shift.
                       ASCII value in the range: 32<=ord(char)<=126
        shift (int): the amount to shift char by

        Returns: (string) the shifted character with ASCII value in the range [32, 126]
        '''
        ascii_num = ord( char )
        shifted_ascii_num = ascii_num + shift
        while shifted_ascii_num < 32 or shifted_ascii_num > 126:

            shifted_ascii_num = ( ( shifted_ascii_num - 32 ) % 95 ) + 32

        return chr( shifted_ascii_num )


    def apply_pad(self, pad):
        '''
        Used to calculate the ciphertext produced by applying a one time pad to the message text.
        For each character in the text at index i shift that character by
            the amount specified by pad[i]

        pad (list of ints): a list of integers used to encrypt the message text
                        len(pad) == len(the message text)

        Returns: (string) The ciphertext produced using the one time pad
        '''
        ciphertext = ""
        for i in range( len( pad ) ):

            cip_char = self.shift_char( self.message[ i ] , pad[ i ] )
            ciphertext = ciphertext + cip_char

        return ciphertext


class PlaintextMessage( Message ):

    def __init__(self , input_text , pad = None ):
        '''
        Initializes a PlaintextMessage object.

        input_text (string): the message's text
        pad (list of ints OR None): the pad to encrypt the input_text or None if left empty
            if pad is not None then len(pad) == len(self.input_text)

        A PlaintextMessage object inherits from Message. It has three attributes:
            the message text
            the pad (list of integers, determined by pad
                or generated randomly using self.generate_pad() if pad is None)
            the ciphertext (string, input_text encrypted using the pad)
        '''
        super().__init__( input_text )
        if pad == None:

            self.pad = self.generate_pad()

        else:

            # need to save a copy of pad because if pad has been changed outside,the pad in the instance of PlaintextMessage will be change as will
            self.pad = pad.copy() 
        
        self.ciphertext = self.get_ciphertext()

    def __repr__(self):
        '''
        Returns a human readable representation of the object
        DO NOT CHANGE

        Returns: (string) A representation of the object
        '''
        return f'''PlaintextMessage('{self.get_text()}', {self.get_pad()})'''

    def generate_pad(self):
        '''
        Generates a one time pad which can be used to encrypt the message text.

        The pad should be generated by making a new list and for each character
            in the message chosing a random number in the range [0, 110) and
            adding that number to the list.

        Returns: (list of integers) the new one time pad
        '''
        pad_list = []
        for char in self.message:

            pad_elem = random.randint( 0 , 110 )
            pad_list.append( pad_elem )

        return pad_list

    def get_pad(self):
        '''
        Used to safely access your one time pad outside of the class

        Returns: (list of integers) a COPY of your pad
        '''
        return self.pad.copy()

    def get_ciphertext(self):
        '''
        Used to access the ciphertext produced by applying pad to the message text

        Returns: (string) the ciphertext
        '''
        ciphertext = self.apply_pad( self.pad )
        return ciphertext

    def change_pad(self, new_pad):
        '''
        Changes the pad used to encrypt the message text and updates any other
        attributes that are determined by the pad.

        new_pad (list of ints): the new one time pad that should be associated with this message.
            len(new_pad) == len(the message text)

        Returns: nothing
        '''
        # if pad in it is changed,the ciphertext should change as well
        self.pad = new_pad
        self.ciphertext = self.get_ciphertext()
    

class EncryptedMessage(Message):
    def __init__(self, input_text):
        '''
        Initializes an EncryptedMessage object

        input_text (string): the ciphertext of the message

        an EncryptedMessage object inherits from Message. It has one attribute:
            the message text (ciphertext)
        '''
        super().__init__( input_text )

    def __repr__(self):
        '''
        Returns a human readable representation of the object
        DO NOT CHANGE

        Returns: (string) A representation of the object
        '''
        return f'''EncryptedMessage('{self.get_text()}')'''

    def decrypt_message(self, pad):
        '''
        Decrypts the message text that was encrypted with pad as described in the writeup

        pad (list of ints): the new one time pad used to encrypt the message.
            len(pad) == len(the message text)

        Returns: (PlaintextMessage) the decrypted message (containing the pad)
        '''
        decrypt_pad = []
        for elem in pad:

            decrypt_pad.append( -elem )

        plain_text = self.apply_pad( decrypt_pad )
        return PlaintextMessage( plain_text , pad )
